{-# OPTIONS_GHC -XNoRebindableSyntax #-}

module SubHask.Category.Algebra.HMatrix
    ( VS.Vector
    , Linear
--     , mkMatrix
--     , trans
-- 
--     , GL
--     , unsafeProveGL
--     , proveGL
-- 
--     , SO
--     , O
--     , Sp
    )
    where

import qualified Prelude as P

import Foreign.Storable
import qualified Data.Vector.Generic as VG
import qualified Data.Vector.Storable as VS

import qualified Numeric.LinearAlgebra as HM
import qualified Data.Packed.Matrix as HM

import SubHask.Internal.Prelude
import SubHask.Algebra
import SubHask.Category
import SubHask.Category.Algebra.Vector

import Debug.Trace

-------------------------------------------------------------------------------

-- mkMatrix :: Storable r => Int -> Int -> [r] -> (VS.Vector r `Linear` VS.Vector r)
-- mkMatrix r c xs = Matrix $ AddUnit' $ (r HM.>< c) xs
-- 
-- x = mkMatrix 3 3 [1..10] :: VS.Vector Double `Linear` VS.Vector Double
-- y = mkMatrix 3 3 [2..10] :: VS.Vector Double `Linear` VS.Vector Double
-- z = mkMatrix 3 2 [2..10] :: VS.Vector Double `Linear` VS.Vector Double
-- t = mkMatrix 2 2 [2..10] :: VS.Vector Double `Linear` VS.Vector Double
-- t' = unsafeProveGL t

---------

data Linear a b
    = Matrix (HM.Matrix (Scalar a))
    | Tensor
    | Unit
--     deriving (Read,Show)

deriving instance (HM.Element (Scalar a), Show (Scalar a)) => Show (Linear a b)

-- deriving instance HM.Container HM.Matrix r => Semigroup (VS.Vector r `Linear` VS.Vector r)
-- deriving instance HM.Container HM.Matrix r => Monoid (VS.Vector r `Linear` VS.Vector r)
-- instance HM.Container HM.Matrix r => Abelian (VS.Vector r `Linear` VS.Vector r)
-- 
-- instance HM.Container HM.Matrix r => Group (VS.Vector r `Linear` VS.Vector r) where
--     {-# INLINE negate #-}
--     negate (Matrix Unit') = Matrix $ Unit'
--     negate (Matrix (AddUnit' m)) = Matrix $ AddUnit' $ HM.scale (-1) m

type instance Scalar (VS.Vector r `Linear` VS.Vector r) = Scalar r

-- instance (IsScalar r, Ring r, HM.Container HM.Matrix r) => Module (VS.Vector r `Linear` VS.Vector r) where
--     {-# INLINE (.*) #-}
--     r .* (Matrix Unit') = Matrix Unit'
--     r .* (Matrix (AddUnit' m)) = Matrix $ AddUnit' $ HM.scale r m
-- 
-- instance (IsScalar r, Field r, HM.Container HM.Matrix r) => VectorSpace (VS.Vector r `Linear` VS.Vector r)

---------

class ValidLinear a
instance ValidLinear (VS.Vector r)
instance ValidLinear (Linear a b)

instance Category Linear where
    type ValidCategory Linear a b = 
--         ( a ~ VS.Vector (Scalar a)
--         , b ~ VS.Vector (Scalar b)
--         , a ~ b
        ( ValidLinear a
        , ValidLinear b
        , Scalar a ~ Scalar b
        , HM.Container HM.Matrix (Scalar a)
        , HM.Product (Scalar a)
        )

    {-# INLINE id #-}
    id = Unit

--     {-# INLINE (.) #-}
--     a          . Unit       = a
--     Unit       . b          = b
--     (Matrix a) . (Matrix b) = Matrix $ a HM.<> b
--     Tensor     . Tensor     = Tensor

-- instance SubCategory Linear (->) where
--     {-# INLINE embed #-}
--     embed _          = id 
--     embed (Matrix m) v  = v HM.<> m

embed' :: 
    ( a ~ a0 (Scalar a)
    , b ~ b0 (Scalar a)
    , HM.Mul a0 HM.Matrix b0
    , HM.Product (Scalar a)
    ) => Linear a b -> a -> b
embed' (Matrix m) v  = v HM.<> m

-- instance Monoidal Linear where
--     type Tensor Linear = Linear
--     type Unit Linear = ()
--     {-# INLINE tensor #-}
--     tensor = Tensor
-- 
-- instance Dagger (Linear r) where
--     {-# INLINE dagger #-}
--     dagger (Matrix Unit') = Matrix Unit'
--     dagger (Matrix (AddUnit' m)) = Matrix $ AddUnit' $ HM.trans m

-- {-# INLINE trans #-}
-- trans :: 
--     ( IsScalar r
--     , HM.Container HM.Vector r
--     , HM.Product r
--     ) => (VS.Vector r `Linear` VS.Vector r) -> (VS.Vector r `Linear` VS.Vector r)
-- trans = dagger

-------------------

instance HM.Container HM.Matrix r => Semigroup (HM.Matrix r) where
    m1 + m2 = m1 `HM.add` m2
--     m1 + m2 = HM.liftMatrix (VG.zipWith (+) $ HM.flatten m1) m2


-------------------------------------------------------------------------------

{-
-- | The general linear group is the group of all invertible matrices.
--
-- Note: In standard notation, the group operation is given by matrix 
-- multiplication.  We continue to use matrix addition as the group operation,
-- however, and matrix multiplication becomes the category @(.)@ operation.
-- Thus, @GL@ is the version of "Linear" that is also a "Groupoid".
--
-- See <https://en.wikipedia.org/wiki/General_linear_group wikipedia> or 
-- <http://ncatlab.org/nlab/show/general+linear+group ncatlab> for more info.

newtype GL a b = GL (Linear a b)

deriving instance Read (Linear a b) => Read (GL a b)
deriving instance Show (Linear a b) => Show (GL a b)

type instance Scalar (GL a b) = Scalar (Linear a b)

deriving instance Semigroup (Linear a b) => Semigroup (GL a b)
deriving instance Abelian (Linear a b) => Abelian (GL a b)
deriving instance Monoid (Linear a b) => Monoid (GL a b)
deriving instance Group (Linear a b) => Group (GL a b)
deriving instance Module (Linear a b) => Module (GL a b)
deriving instance VectorSpace (Linear a b) => VectorSpace (GL a b)

instance Category Linear => Category GL where
    type ValidCategory GL a b = 
        ( ValidCategory Linear a b
        , HM.Field (Scalar a)
        , Eq (Scalar a)
        )

    id = GL id
    (GL a).(GL b) = GL $ a.b

instance SubCategory cat Linear => SubCategory cat GL where
    embed (GL m) = embed m

instance Dagger GL where
    dagger (GL m) = GL $ dagger m

instance Groupoid GL where
    inverse (GL (Matrix (Unit'))) = GL (Matrix (Unit'))
    inverse (GL (Matrix (AddUnit' m))) = GL (Matrix (AddUnit' $ HM.inv m))

unsafeProveGL :: Linear a b -> GL a b
unsafeProveGL = GL

proveGL :: ValidCategory GL a b => Linear a b -> Maybe (GL a b)
proveGL x@(Matrix Unit') = Just $ GL x
proveGL x@(Matrix (AddUnit' m)) = if HM.det m /= 0
    then Just $ GL x
    else Nothing

-------------------------------------------------------------------------------

-- | The orthogonal group "O" is the subgroup of "GL" that corresponds with
-- rotations (i.e. all transformations that preserve Euclidean distances).  
--
-- See <https://en.wikipedia.org/wiki/Orthogonal_group wikipedia> or 
-- <http://ncatlab.org/nlab/show/orthogonal+group ncatlab> for more info.
newtype O a b = O (GL a b)

deriving instance Read (GL a b) => Read (O a b)
deriving instance Show (GL a b) => Show (O a b)

type instance Scalar (O a b) = Scalar (GL a b)

deriving instance Semigroup (GL a b) => Semigroup (O a b)
deriving instance Abelian (GL a b) => Abelian (O a b)
deriving instance Monoid (GL a b) => Monoid (O a b)
deriving instance Group (GL a b) => Group (O a b)
deriving instance Module (GL a b) => Module (O a b)
deriving instance VectorSpace (GL a b) => VectorSpace (O a b)

instance Category GL => Category O where
    type ValidCategory O a b = (ValidCategory GL a b)
    id = O id
    (O a).(O b) = O $ a.b

instance SubCategory cat GL => SubCategory cat O where
    embed (O m) = embed m

instance Dagger O where
    dagger (O m) = O $ dagger m

instance Groupoid O where
    inverse (O m) = O $ inverse m

-------------------------------------------------------------------------------

-- | The special orthogonal group "SO" is the subgroup of "O" with determinant 
-- 1.  This group is also called the special linear group.
--
-- See <https://en.wikipedia.org/wiki/Special_linear_group wikipedia>.
newtype SO a b = SO (O a b)

deriving instance Read (O a b) => Read (SO a b)
deriving instance Show (O a b) => Show (SO a b)

type instance Scalar (SO a b) = Scalar (O a b)

deriving instance Semigroup (O a b) => Semigroup (SO a b)
deriving instance Abelian (O a b) => Abelian (SO a b)
deriving instance Monoid (O a b) => Monoid (SO a b)
deriving instance Group (O a b) => Group (SO a b)
deriving instance Module (O a b) => Module (SO a b)
deriving instance VectorSpace (O a b) => VectorSpace (SO a b)

instance Category O => Category SO where
    type ValidCategory SO a b = (ValidCategory O a b)
    id = SO id
    (SO a).(SO b) = SO $ a.b

instance SubCategory cat O => SubCategory cat SO where
    embed (SO m) = embed m

instance Dagger SO where
    dagger (SO m) = SO $ dagger m

instance Groupoid SO where
    inverse (SO m) = SO $ inverse m

-------------------------------------------------------------------------------

-- | The symplectic group is the group of symplectic matrices.  Because all
-- symplectic matrices have determinant 1, this is a subgroup of "SO".
--
-- See <https://en.wikipedia.org/wiki/Symplectic_group wikipedia>. 
newtype Sp a b = Sp (SO a b)

deriving instance Read (SO a b) => Read (Sp a b)
deriving instance Show (SO a b) => Show (Sp a b)

type instance Scalar (Sp a b) = Scalar (SO a b)

deriving instance Semigroup (SO a b) => Semigroup (Sp a b)
deriving instance Abelian (SO a b) => Abelian (Sp a b)
deriving instance Monoid (SO a b) => Monoid (Sp a b)
deriving instance Group (SO a b) => Group (Sp a b)
deriving instance Module (SO a b) => Module (Sp a b)
deriving instance VectorSpace (SO a b) => VectorSpace (Sp a b)

instance Category SO => Category Sp where
    type ValidCategory Sp a b = (ValidCategory SO a b)
    id = Sp id
    (Sp a).(Sp b) = Sp $ a.b

instance SubCategory cat SO => SubCategory cat Sp where
    embed (Sp m) = embed m

instance Dagger Sp where
    dagger (Sp m) = Sp $ dagger m

instance Groupoid Sp where
    inverse (Sp m) = Sp $ inverse m
-}
